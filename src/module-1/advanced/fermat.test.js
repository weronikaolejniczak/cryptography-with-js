const fermat = require('./fermat');

const TESTS = [
    [1508434, 9923888, 'yes', 2^4 * 13 * 47711],
    [907449, 7482947, 'yes', 1777 * 4211],
    [532797, 1660040, 'yes', 2^3 * 5 * 47 * 883],
    [17447, 26059, 'yes', 11 * 23 * 103],
    [221808, 1172176, 'yes', 2^4 * 61 * 1201],
    [1662375, 9881003, 'yes', 11 * 191 * 4703],
    [5252320, 7294851, 'yes', 3^2 * 810539],
    [3332117, 8689792, 'yes', 2^7 * 29 * 2341],
    [676744, 857466, 'yes', 2 * 3^4 * 67 * 79],
    [1756552, 2543439, 'yes', 3 * 847813],
    [4756370, 6343549, 'yes', 19 * 333871],
    [5144861, 5873657, 'yes', 991 * 5927],
    [1157100, 1480322, 'yes', 2 * 740161],
    [5587809, 6173020, 'yes', 2^2 * 5 * 7^2 * 6299],
    [2414252, 8661601, 'yes', 13 * 666277],
    [5136295, 6963088, 'yes', 2^4 * 11 * 39563],
    [1405716, 3830738, 'yes', 2 * 89 * 21521],
    [1835580, 9881983, 'no', 9881983],
    [3039354, 3693342, 'yes', 2 * 3 * 615557],
    [624882, 1063784, 'yes', 2^3 * 103 * 1291],
    [1975366, 5873010, 'yes', 2 * 3 * 5 * 11 * 13 * 37^2],
    [704177, 1827044, 'yes', 2^2 * 73 * 6257],
    [5540067, 8861261, 'no', 8861261],
    [6010456, 9258783, 'yes', 3 * 3086261],
    [289116, 700161, 'yes', 3 * 7^2 * 11 * 433],
    [1626308, 3933954, 'yes', 2 * 3^3 * 263 * 277],
    [4736821, 5150825, 'yes', 5^2 * 206033],
    [3008009, 5247226, 'yes', 2 * 641 * 4093],
    [3506405, 7264882, 'yes', 2 * 17^2 * 12569],
    [4228760, 4585523, 'no', 4585523],
    [339589, 4632277, 'yes', 13 * 349 * 1021],
    [2222330, 3811783, 'no', 3811783],
    [4840253, 5288863, 'yes', 47 * 131 * 859],
    [1068505, 5745561, 'yes', 3 * 23 * 83269],
    [2186143, 5929010, 'yes', 2 * 5 * 41 * 14461],
    [420223, 3042662, 'yes', 2 * 7 * 217333],
    [6053048, 7351822, 'yes', 2 * 19 * 193469],
    [1264981, 2018979, 'yes', 3^3 * 37 * 43 * 47],
    [2131464, 8285178, 'yes', 2 * 3 * 11 * 19 * 6607],
    [2332139, 5616506, 'yes', 2 * 7 * 401179]
];

for (let i = 0; i < TESTS.length; i++) {
    let a = TESTS[i][0];
    let n = TESTS[i][1];
    let result = TESTS[i][2];

    test(
        result == 'yes'
        ? `expect ${a.toString()} to be a composite number witness of ${n.toString()}`
        : `expect ${a.toString()} to probably NOT be a composite number witness of ${n.toString()}`,
      () => {
        let fermatResult = fermat(a, n).toString();

        expect(fermatResult).toBe(result.toString());
    });
}
